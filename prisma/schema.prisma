// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String    @db.VarChar(20)
  lastName  String    @db.VarChar(20)
  email     String    @unique @db.VarChar(50)
  password  String    @db.VarChar(50)
  balance   Decimal   @default(0) @db.Money
  phone     String    @db.VarChar(20)
  createdAt DateTime
  updatedAt DateTime
  Order     Order[]
  Address   Address[]
  cart      Cart?
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  orderStatus OrderStatus @default(ONGOING)
  totalPrice  Decimal     @db.Money
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int
  OrderItem   OrderItem[]
  createdAt   DateTime
  updatedAt   DateTime
}

model Address {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  country     String  @db.VarChar(22)
  city        String  @db.VarChar(22)
  postalCode  String  @db.VarChar(15)
  telephone   String  @db.VarChar(22)
  street      String  @db.VarChar(50)
  houseNumber String  @db.VarChar(10)
  Order       Order[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime
  updatedAt DateTime
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  description String      @db.Text
  price       Decimal     @db.Money
  image       String      @db.Text
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  discount    Discount?   @relation(fields: [discountId], references: [id])
  discountId  Int?
  OrderItem   OrderItem[]
  Inventory   Inventory[]
  createdAt   DateTime
  updatedAt   DateTime
  CartItem    CartItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(30)
  createdAt DateTime
  updatedAt DateTime
  Product   Product[]
}

model Discount {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(30)
  percent   Int
  active    Boolean   @default(false)
  createdAt DateTime
  updatedAt DateTime
  Product   Product[]
}

model Inventory {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  size      String? @db.VarChar(20)
  color     String? @db.VarChar(20)
}

model Cart {
  id       Int        @id @default(autoincrement())
  user     User       @relation(fields: [userId], references: [id])
  userId   Int        @unique
  CartItem CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

enum OrderStatus {
  COMPLETED
  ONGOING
  CANCELED
}
