// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

//datasource db {
//  provider = "postgresql"
//  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  firstName String      @db.VarChar(20)
  lastName  String      @db.VarChar(20)
  email     String      @unique @db.VarChar(50)
  password  String      @db.Text
  balance   Decimal     @default(0) @db.Money
  phone     String      @db.VarChar(20)
  createdAt DateTime
  updatedAt DateTime
  role      Role        @default(CUSTOMER)
  token     String?     @db.Text
  Order     Order[]
  Address   Address[]
  cart      Cart?
  Product   Product[]
  Favourite Favourite[]
  Discount  Discount[]
  Category  Category[]
  Comment   Comment[]
  Rating    Rating[]
}

model Favourite {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  orderStatus OrderStatus @default(ONGOING)
  totalPrice  Decimal     @db.Money
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int
  OrderItem   OrderItem[]
  createdAt   DateTime
  updatedAt   DateTime
}

model Address {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  country     String  @db.VarChar(22)
  city        String  @db.VarChar(22)
  postalCode  String  @db.VarChar(15)
  telephone   String  @db.VarChar(22)
  street      String  @db.VarChar(50)
  houseNumber String  @db.VarChar(10)
  Order       Order[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Product {
  id                  Int            @id @default(autoincrement())
  name                String         @db.VarChar(50)
  description         String         @db.Text
  price               Decimal        @db.Money
  mainImage           String         @db.Text
  Gallery             ProductImage[]
  category            Category       @relation(fields: [categoryId], references: [id])
  categoryId          Int
  discount            Discount?      @relation(fields: [discountId], references: [id])
  discountId          Int?
  vendor              User           @relation(fields: [vendorId], references: [id])
  vendorId            Int
  OrderItem           OrderItem[]
  Inventory           Inventory[]
  createdAt           DateTime
  updatedAt           DateTime
  CartItem            CartItem[]
  Favourite           Favourite[]
  Comment             Comment[]
  Rating              Rating[]
  averageRatingValue  Int            @default(0)
  totalRatingNetValue Int            @default(0)
  ratingCounter       Int            @default(0)
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(30)
  createdAt DateTime
  updatedAt DateTime
  Product   Product[]
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   Int
}

model Discount {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(30)
  percent   Int
  active    Boolean   @default(false)
  createdAt DateTime
  updatedAt DateTime
  Product   Product[]
  vendor    User      @relation(fields: [vendorId], references: [id])
  vendorId  Int
}

model Inventory {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  size      String? @db.VarChar(20)
  color     String? @db.VarChar(20)
}

model Cart {
  id       Int        @id @default(autoincrement())
  user     User       @relation(fields: [userId], references: [id])
  userId   Int        @unique
  CartItem CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Comment {
  id             Int      @id @default(autoincrement())
  product        Product? @relation(fields: [productId], references: [id])
  productId      Int?
  user           User?    @relation(fields: [commentOwnerId], references: [id])
  commentOwnerId Int?
  commentText    String
  createdAt      DateTime
  updatedAt      DateTime
}

model Rating {
  id          Int      @id @default(autoincrement())
  product     Product? @relation(fields: [productId], references: [id])
  productId   Int?
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  ratingValue Int
}

enum OrderStatus {
  COMPLETED
  ONGOING
  CANCELED
}

enum Role {
  CUSTOMER
  VENDOR
}
